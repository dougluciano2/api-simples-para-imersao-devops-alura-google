# Nome final do workflow de CI/CD
name: CI/CD - Build, Terraform and Deploy to Cloud Run

# Gatilho: rodar no push para o branch 'main'
on:
  push:
    branches: [ "main" ]

# Variaveis de ambiente globais para o workflow
env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  APP_NAME: my-java-app
  GAR_REPO: api-repo # Nome do repositório no Artifact Registry

# Permissões para o workflow se autenticar no Google Cloud
permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout do código
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Autenticação com o Google Cloud
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      # 3. Setup do Java e Cache do Maven
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Download Maven dependencies
        run: mvn dependency:go-offline

      # 4. Setup do Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 5. Configura o Docker para autenticar com o Artifact Registry
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      # 6. Build e Push da imagem para o Artifact Registry
      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true # Agora vamos enviar a imagem!
          tags: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPO }}/${{ env.APP_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 7. Setup do Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # 8. Executa o Terraform para criar/atualizar a infraestrutura
      - name: Terraform Apply
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="gcp_project_id=${{ env.GCP_PROJECT_ID }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}"

      # 9. Deploy da nova imagem no Cloud Run, conectando ao banco de dados
      - name: Deploy to Cloud Run
        id: deploy
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: ${{ env.APP_NAME }}
          region: ${{ env.GCP_REGION }}
          image: ${{ steps.build-image.outputs.digest }}

          # Define as variáveis de ambiente para a aplicação
          env_vars: |-
            DB_USER=db_app
            DB_NAME=sa
            # A URL do banco é injetada automaticamente pela action quando a seção 'database' é usada

          # CORREÇÃO AQUI: 'database' está no mesmo nível de 'service', 'image', etc.
          # Configura a conexão segura com o Cloud SQL
          database:
            instance: ${{ env.APP_NAME }}-mysql-db
            secrets:
              # Mapeia o segredo do GitHub para a variável de ambiente DB_PASSWORD
              - name: DB_PASSWORD
                value: ${{ secrets.DB_PASSWORD }}

      # 10. Mostra a URL final da aplicação
      - name: Show Output
        run: "echo 'Deploy finalizado! Acesse sua API em: ${{ steps.deploy.outputs.url }}'"