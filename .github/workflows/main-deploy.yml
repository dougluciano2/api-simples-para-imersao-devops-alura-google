name: CI/CD - Build, Terraform and Deploy to Cloud Run

on:
  push:
    branches: [ "main" ]

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  APP_NAME: my-java-app
  GAR_REPO: api-repo
  DB_INSTANCE_NAME: my-java-app-mysql-db

permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Download Maven dependencies
        run: mvn dependency:go-offline

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPO }}/${{ env.APP_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Apply
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="gcp_project_id=${{ env.GCP_PROJECT_ID }}" \
            -var="app_name=${{ env.APP_NAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}"

      # <<< CORREÇÃO APLICADA NESTE PASSO >>>
      - name: Deploy to Cloud Run
        id: deploy
        run: |
          # Pega o nome de conexão completo da instância do SQL para garantir a conexão segura
          DB_CONNECTION_NAME=$(gcloud sql instances describe ${{ env.DB_INSTANCE_NAME }} --project=${{ env.GCP_PROJECT_ID }} --format="value(connectionName)")

          # Executa o comando de deploy, agora passando TODAS as variáveis de ambiente necessárias
          gcloud run deploy ${{ env.APP_NAME }} \
            --image=${{ steps.build-image.outputs.digest }} \
            --region=${{ env.GCP_REGION }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --platform=managed \
            --allow-unauthenticated \
            --add-cloudsql-instances=${DB_CONNECTION_NAME} \
            --update-env-vars="DB_USER=root,DB_NAME=sa,DB_PASSWORD=${{ secrets.DB_PASSWORD }},DB_HOST=/cloudsql/${DB_CONNECTION_NAME}"

      - name: Show Output URL
        id: final-output
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.APP_NAME }} --platform=managed --region=${{ env.GCP_REGION }} --project=${{ env.GCP_PROJECT_ID }} --format="value(status.url)")
          echo "Deploy finalizado! Acesse sua API em: $SERVICE_URL"
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT